<?php
namespace AppBundle\Repository;

use AppBundle\Entity\Game;
use AppBundle\Entity\GameInterface;
use AppBundle\Entity\PlayerHand;
use Doctrine\ORM\EntityRepository;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository implements GameRepositoryInterface
{
    /**
     * @param GameInterface $game
     */
    public function save(GameInterface $game)
    {
        if (null === $game->getId()) {
            $this->_em->persist($game);
        } else {
            $this->_em->merge($game);
        }

        $this->_em->flush();
    }

    /**
     * @param int|null $limit
     * @return PlayerHand[]
     */
    public function findBestWinningHands(int $limit = null)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT h
                FROM AppBundle:PlayerHand h
                WHERE h.won = 1
                ORDER BY h.score DESC'
            );

        if (null !== $limit) {
            $query->setMaxResults($limit);
        }

        return $query->getResult();
    }

    /**
     * @param int|null $limit
     * @return Game[]
     */
    public function findAllInactive(int $limit = null)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT g FROM AppBundle:Game g WHERE g.active = false ORDER BY g.createdAt ASC'
            );

        if (null !== $limit) {
            $query->setMaxResults($limit);
        }

        return $query->getResult();
    }

    /**
     * @param int $playerId
     * @param int|null $limit
     * @return Game[]
     */
    public function findAllInactiveForPlayerId(int $playerId, int $limit = null)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT g
                FROM AppBundle:Game g 
                WHERE g.active = false
                 AND EXISTS(SELECT h FROM AppBundle:PlayerHand h WHERE h.game = g.id AND h.player = :playerId)
                ORDER BY g.createdAt ASC'
            )->setParameter('playerId', $playerId);

        if (null !== $limit) {
            $query->setMaxResults($limit);
        }

        return $query->getResult();
    }
}
